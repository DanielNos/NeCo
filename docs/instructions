# Instructions

| Number | Name                 | Arguments   | Description                                                     |
|--------|----------------------|-------------|-----------------------------------------------------------------|
|     0  | CALL_BUILTIN_FUNC    | function id | Calls a built-in function.                                      |
|     1  | HALT                 | exit code   | Exits program with specified exit code.                         |
|     2  | STORE_REG_A          | variable id | Stores the value of RegGenA in a variable.                      |
|     3  | STORE_REG_B          | variable id | Stores the value of RegGenB in a variable.                      |
|     4  | LOAD_CONST_REG_A     | constant id | Loads a constant to RegGenA.                                    |
|     5  | LOAD_CONST_REG_A     | constant id | Loads a constant to RegGenB.                                    |
|     6  | LOAD_REG_A           | variable id | Loads a variable to RegGenA.                                    |
|     7  | LOAD_REG_B           | variable id | Loads a variable to RegGenB.                                    |
|     8  | PUSH_SCOPE           | scope id    | Pushes a new scope to the scope stack. ID is a string constant. |
|     9  | POP_ARG_STACK_MEM    | variable id | Pops a value from ArgStack to a variable in memory.             |
|    10  | CALL                 | function id | Calls function.                                                 |
|    10  | SWAP_GENERIC         |             | Swaps values of RegGenA and RegGenB.                            |
|    11  | COPY_REG_A_TO_C      |             | Copies value from RegGenA to RegGenC.                           |
|    12  | COPY_REG_B_TO_C      |             | Copies value from RegGenB to RegGenC.                           |
|    13  | COPY_REG_C_TO_A      |             | Copies value from RegGenC to RegGenA.                           |
|    14  | COPY_REG_C_TO_B      |             | Copies value from RegGenC to RegGenB.                           |
|    15  | PUSH_REG_A_ARG_STACK |             | Pushes the value of RegGenA to StackArg.                        |
|    16  | PUSH_REG_B_ARG_STACK |             | Pushes the value of RegGenB to StackArg.                        |
|    17  | POP_ARG_STACK_REG_A  |             | Pops argument form StackArg to RegA.                            |
|    18  | INT_ADD              |             | RegGenA + RegGenB -> RegGenA.                                   |
|    19  | INT_SUB              |             | RegGenA - RegGenB -> RegGenA.                                   |
|    20  | INT_MUL              |             | RegGenA * RegGenB -> RegGenA.                                   |
|    21  | INT_DIV              |             | RegGenA / RegGenB -> RegGenA.                                   |
|    22  | INT_POW              |             | RegGenA ^ RegGenB -> RegGenA.                                   |
|    23  | INT_MOD              |             | RegGenA % RegGenB -> RegGenA.                                   |
|    24  | FLT_ADD              |             | RegGenA + RegGenB -> RegGenA.                                   |
|    25  | FLT_SUB              |             | RegGenA - RegGenB -> RegGenA.                                   |
|    26  | FLT_MUL              |             | RegGenA * RegGenB -> RegGenA.                                   |
|    27  | FLT_DIV              |             | RegGenA / RegGenB -> RegGenA.                                   |
|    28  | FLT_POW              |             | RegGenA ^ RegGenB -> RegGenA.                                   |
|    29  | FLT_MOD              |             | RegGenA % RegGenB -> RegGenA.                                   |
|    30  | STRING_CONCAT        |             | RegGenA + RegGenB -> RegGenA.                                   |
|    31  | DECLARE_BOOL         |             | Declares a boolean.                                             |
|    32  | DECLARE_INT          |             | Declares an integer.                                            |
|    33  | DECLARE_FLOAT        |             | Declares a float.                                               |
|    34  | DECLARE_STRING       |             | Declares a string.                                              |
|    35  | RETURN               |             | Drops scope and moves to return adress.                         |
|   ...  | undefined            |             |                                                                 |
| 127 >  | LINE_OFFSET          |             | Indicates a line offset to the VM. Requires special decoding.   |

## Line Offset Instruction

- defined by byte[0] of instruction being 1, so all instructions with id over 127 are line offset
- rest of bits is line offset + 1 (offset of 0 lines is pointless)
- byte format: 1XXX XXXX, where X is offset value
- line offset = byte value - 127
